// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace LightNode2.Client.Generator
{
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Reflection;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Collections.Generic;
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>

    #line 1 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class LightNodeClientGenerator : LightNodeClientGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {

            #line 11 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"

    // ------------- T4 Configuration ------------- //

	// 1. Set LightNodeContract assemblies(and all dependency) path to follow
	var assemblies = new [] { $"{Environment.CurrentDirectory}/../Performance/LightNode2.Performance/bin/Debug/netcoreapp2.0/LightNode2.Performance.dll", };

	// 2. Set Namespace & ClientName & Namespace
	var clientName = "LightNode2Client";
	var namespaceName = "LightNode2.Client";

	// 3. Set DefaultContentFormatter Construct String
	var defaultContentFormatter = "new LightNode2.Formatter.JsonContentFormatter()";

	// 4. Set Additional using Namespace
	var usingNamespaces = new [] {"System.Linq"};

	// 5. Set append "Async" suffix to method name(ex: CalcAsync or Calc)
	var addAsyncSuffix = true;

	// extra. Commandline Argument override settings
    if (CommandlineOptions != null)
    {
		assemblies = CommandlineOptions.InputDllPathes;
		clientName = CommandlineOptions.ClientName;
		namespaceName = CommandlineOptions.NameSpaceName;
		defaultContentFormatter = CommandlineOptions.ResolverName;
		usingNamespaces = CommandlineOptions.UsingNamespaces;
		addAsyncSuffix = !CommandlineOptions.RemoveAsyncSuffix;
    }

    // ----------End T4 Configuration ------------- //

    Func<Type, string> BeautifyType = null;
    BeautifyType = (Type t) =>
    {
        if (!t.IsGenericType) return t.FullName;

        var innerFormat = string.Join(", ", t.GetGenericArguments().Select(x => BeautifyType(x)));
        return Regex.Replace(t.GetGenericTypeDefinition().FullName, @"`.+$", "") + "<" + innerFormat + ">";
    };

    Func<Type, string> UnwrapTask = (Type t) =>
    {
        return BeautifyType(t.GetGenericArguments()[0]);
    };

    var ignoreMethods = new HashSet<string> { "Equals", "GetHashCode", "GetType", "ToString" };

    //var typeFromAssemblies = System.AppDomain.CurrentDomain.GetAssemblies()
	var typeFromAssemblies = assemblies.Select(x => Assembly.LoadFrom(x))
        .Where(x => !Regex.IsMatch(x.GetName().Name, "^(mscorlib|System|Sytem.Web|EnvDTE)$"))
        .SelectMany(x => x.GetTypes())
        .Where(x => x != null && x.FullName != "LightNode2.Server.LightNodeContract");

    var contracts = typeFromAssemblies
        .Where(x =>
        {
            while (x != typeof(object) && x != null)
            {
                if (x.FullName == "LightNode2.Server.LightNodeContract") return true;
                x = x.BaseType;
            }
            return false;
        })
        .Where(x => !x.IsAbstract && x.GetCustomAttributes(true).All(y => y.GetType().FullName != "LightNode2.Server.IgnoreOperationAttribute" && y.GetType().FullName != "LightNode2.Server.IgnoreClientGenerateAttribute"))
        .Select(x =>
        {
            var methods = x.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                .Where(methodInfo => !(methodInfo.IsSpecialName && (methodInfo.Name.StartsWith("set_") || methodInfo.Name.StartsWith("get_"))))
                .Where(methodInfo => !ignoreMethods.Contains(methodInfo.Name))
                .Where(methodInfo => methodInfo.GetCustomAttributes(true).All(y => y.GetType().FullName != "LightNode2.Server.IgnoreOperationAttribute" && y.GetType().FullName != "LightNode2.Server.IgnoreClientGenerateAttribute"))
                .Select(methodInfo =>
                {
                    var retType = methodInfo.ReturnType;
                    var returnType =
                        (retType == typeof(void)) ? typeof(Task)
                        : (retType == typeof(Task)) ? retType
                        : (retType.IsGenericType && retType.GetGenericTypeDefinition() == typeof(Task<>)) ? retType
                        : typeof(Task<>).MakeGenericType(retType);

                    var parameter = methodInfo.GetParameters()
                        .Select(paramInfo => new
                        {
                            paramInfo.Name,
                            paramInfo.ParameterType,
                            paramInfo.IsOptional,
                            paramInfo.DefaultValue,
                        })
                        .Concat(new[]{new
                        {
                            Name = "cancellationToken",
                            ParameterType = typeof(CancellationToken),
                            IsOptional = true,
                            DefaultValue = (object)default(CancellationToken)
                        }})
                        .ToArray();

                    var parameterString = string.Join(", ", parameter.Select(p =>
                    {
                        return BeautifyType(p.ParameterType) + " " + p.Name;
                    }));

                    var parameterStringWithOptional = string.Join(", ", parameter.Select(p =>
                    {
                        var @base = BeautifyType(p.ParameterType) + " " + p.Name;
                        if (p.IsOptional)
                        {
                            @base += " = " + (
                                (p.DefaultValue == null) ? "null"
                              : (p.DefaultValue is string) ? "\"" + p.DefaultValue + "\""
                              : (p.DefaultValue is CancellationToken) ? "default(CancellationToken)"
                              : (p.ParameterType.IsEnum) ? p.ParameterType.ToString() + "." + p.DefaultValue.ToString()
                              : p.DefaultValue.ToString().ToLower());
                        }
                        return @base;
                    }));

                    var debugOnlyClientGenerateMethod = methodInfo.GetCustomAttributes(true).Any(y => y.GetType().FullName == "LightNode2.Server.DebugOnlyClientGenerateAttribute");

                    return new
                    {
                        OperationName = methodInfo.Name,
                        ReturnType = returnType,
                        Parameters = parameter,
                        ParameterString = parameterString,
                        ParameterStringWithOptional = parameterStringWithOptional,
                        IsDebugOnly = debugOnlyClientGenerateMethod
                    };
                })
                .ToArray();

            var debugOnlyClientGenerate = x.GetCustomAttributes(true).Any(y => y.GetType().FullName == "LightNode2.Server.DebugOnlyClientGenerateAttribute");

            return new
            {
                RootName = x.Name,
                InterfaceName = "_I" + x.Name,
                Operations = methods,
                IsDebugOnly = debugOnlyClientGenerate
            };
        })
        .ToArray();


            #line default
            #line hidden
            this.Write("using LightNode2.Core;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing S" +
                    "ystem.IO;\r\nusing System.Net.Http;\r\nusing System.Threading;\r\nusing System.Threadi" +
                    "ng.Tasks;\r\n");

            #line 161 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join("\r\n", usingNamespaces.Select(x => "using " + x + ";"))));

            #line default
            #line hidden
            this.Write("\r\n\r\nnamespace ");

            #line 163 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));

            #line default
            #line hidden
            this.Write("\r\n{\r\n#if DEBUG\r\n    public partial class ");

            #line 166 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientName));

            #line default
            #line hidden
            this.Write(" : ");

            #line 166 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", contracts.Select(x => x.InterfaceName))));

            #line default
            #line hidden
            this.Write("\r\n#else\r\n    public partial class ");

            #line 168 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientName));

            #line default
            #line hidden
            this.Write(" : ");

            #line 168 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", contracts.Where(x => !x.IsDebugOnly).Select(x => x.InterfaceName))));

            #line default
            #line hidden
            this.Write("\r\n#endif\r\n    {\r\n        static IContentFormatter defaultContentFormatter = ");

            #line 171 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(defaultContentFormatter));

            #line default
            #line hidden
            this.Write(@";
        readonly string rootEndPoint;
        readonly HttpClient httpClient;

        partial void OnAfterInitialized();

        public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders
        {
            get { return httpClient.DefaultRequestHeaders; }
        }

        public long MaxResponseContentBufferSize
        {
            get { return httpClient.MaxResponseContentBufferSize; }
            set { httpClient.MaxResponseContentBufferSize = value; }
        }

        public TimeSpan Timeout
        {
            get { return httpClient.Timeout; }
            set { httpClient.Timeout = value; }
        }

        IContentFormatter contentFormatter;
        public IContentFormatter ContentFormatter
        {
            get { return contentFormatter = (contentFormatter ?? defaultContentFormatter); }
            set { contentFormatter = value; }
        }

");

            #line 201 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var contract in contracts.Where(x => !x.IsDebugOnly)) {

            #line default
            #line hidden
            this.Write("        public ");

            #line 202 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.InterfaceName));

            #line default
            #line hidden
            this.Write(" ");

            #line 202 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.RootName));

            #line default
            #line hidden
            this.Write(" { get { return this; } }\r\n");

            #line 203 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("\r\n#if DEBUG\r\n");

            #line 206 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var contract in contracts.Where(x => x.IsDebugOnly)) {

            #line default
            #line hidden
            this.Write("        public ");

            #line 207 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.InterfaceName));

            #line default
            #line hidden
            this.Write(" ");

            #line 207 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.RootName));

            #line default
            #line hidden
            this.Write(" { get { return this; } }\r\n");

            #line 208 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("#endif\r\n\r\n        public ");

            #line 211 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientName));

            #line default
            #line hidden
            this.Write(@"(string rootEndPoint)
        {
            this.httpClient = new HttpClient();
            this.rootEndPoint = rootEndPoint.TrimEnd('/');
            this.ContentFormatter = defaultContentFormatter;
            OnAfterInitialized();
        }

        public ");

            #line 219 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientName));

            #line default
            #line hidden
            this.Write(@"(string rootEndPoint, HttpMessageHandler innerHandler)
        {
            this.httpClient = new HttpClient(innerHandler);
            this.rootEndPoint = rootEndPoint.TrimEnd('/');
            this.ContentFormatter = defaultContentFormatter;
            OnAfterInitialized();
        }

        public ");

            #line 227 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(clientName));

            #line default
            #line hidden
            this.Write(@"(string rootEndPoint, HttpMessageHandler innerHandler, bool disposeHandler)
        {
            this.httpClient = new HttpClient(innerHandler, disposeHandler);
            this.rootEndPoint = rootEndPoint.TrimEnd('/');
            this.ContentFormatter = defaultContentFormatter;
            OnAfterInitialized();
        }

        protected virtual async Task PostAsync(string method, HttpContent content, CancellationToken cancellationToken)
        {
            var response = await httpClient.PostAsync(rootEndPoint + method, content, cancellationToken).ConfigureAwait(false);
            response.EnsureSuccessStatusCode();
        }

        protected virtual async Task<T> PostAsync<T>(string method, HttpContent content, CancellationToken cancellationToken)
        {
            var response = await httpClient.PostAsync(rootEndPoint + method, content, cancellationToken).ConfigureAwait(false);
            using (var stream = await response.EnsureSuccessStatusCode().Content.ReadAsStreamAsync().ConfigureAwait(false))
            {
                return (T)ContentFormatter.Deserialize(typeof(T), stream);
            }
        }

");

            #line 250 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var contract in contracts) {

            #line default
            #line hidden
            this.Write("        #region ");

            #line 251 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.InterfaceName));

            #line default
            #line hidden
            this.Write("\r\n\r\n");

            #line 253 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(contract.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#if DEBUG\r\n");

            #line 255 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("\r\n");

            #line 257 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var operation in contract.Operations) {

            #line default
            #line hidden

            #line 258 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(operation.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#if DEBUG\r\n");

            #line 260 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("\r\n        ");

            #line 262 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BeautifyType(operation.ReturnType)));

            #line default
            #line hidden
            this.Write(" ");

            #line 262 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.InterfaceName));

            #line default
            #line hidden
            this.Write(".");

            #line 262 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationName + ((addAsyncSuffix) ? "Async" : "")));

            #line default
            #line hidden
            this.Write("(");

            #line 262 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ParameterString));

            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            HttpContent __content = null;\r\n");

            #line 265 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(operation.Parameters.Any(x => x.ParameterType == typeof(byte[]))) {

            #line default
            #line hidden
            this.Write("            var __multi = new MultipartFormDataContent();\r\n");

            #line 267 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var parameter in operation.Parameters.Where(x => x.Name != "cancellationToken")) {

            #line default
            #line hidden

            #line 268 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(parameter.ParameterType == typeof(byte[])) {

            #line default
            #line hidden
            this.Write("            __multi.Add(new ByteArrayContent(");

            #line 269 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("), \"");

            #line 269 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\");\r\n");

            #line 270 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 } else if (parameter.ParameterType.IsArray) {

            #line default
            #line hidden
            this.Write("            if (");

            #line 271 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(" != null) foreach(var __x in ");

            #line 271 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(") { __multi.Add(new StringContent(");

            #line 271 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType.GetElementType(), "__x");

            #line default
            #line hidden
            this.Write("), \"");

            #line 271 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\"); }\r\n");

            #line 272 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 } else if(parameter.ParameterType.IsClass || (parameter.ParameterType.IsGenericType && parameter.ParameterType.GetGenericTypeDefinition() == typeof(Nullable<>))) {

            #line default
            #line hidden
            this.Write("            if (");

            #line 273 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(" != null) __multi.Add(new StringContent(");

            #line 273 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType, parameter.Name);

            #line default
            #line hidden
            this.Write("), \"");

            #line 273 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\");\r\n");

            #line 274 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 } else {

            #line default
            #line hidden
            this.Write("            __multi.Add(new StringContent(");

            #line 275 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType, parameter.Name);

            #line default
            #line hidden
            this.Write("), \"");

            #line 275 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\");\r\n");

            #line 276 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden

            #line 277 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("            __content = __multi;\r\n");

            #line 279 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden

            #line 280 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 else {

            #line default
            #line hidden
            this.Write("            var list = new List<KeyValuePair<string, string>>(");

            #line 281 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Parameters.Length - 1));

            #line default
            #line hidden
            this.Write(");\r\n");

            #line 282 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var parameter in operation.Parameters.Where(x => x.Name != "cancellationToken")) {

            #line default
            #line hidden

            #line 283 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if (parameter.ParameterType.IsArray) {

            #line default
            #line hidden
            this.Write("            if (");

            #line 284 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(" != null) list.AddRange(");

            #line 284 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(".Select(___x => new KeyValuePair<string, string>(\"");

            #line 284 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\", ");

            #line 284 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType.GetElementType(), "___x");

            #line default
            #line hidden
            this.Write(")));\r\n");

            #line 285 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 } else if(parameter.ParameterType.IsClass || (parameter.ParameterType.IsGenericType && parameter.ParameterType.GetGenericTypeDefinition() == typeof(Nullable<>))) {

            #line default
            #line hidden
            this.Write("            if (");

            #line 286 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write(" != null) list.Add(new KeyValuePair<string, string>(\"");

            #line 286 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\", ");

            #line 286 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType, parameter.Name);

            #line default
            #line hidden
            this.Write("));\r\n");

            #line 287 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 } else {

            #line default
            #line hidden
            this.Write("            list.Add(new KeyValuePair<string, string>(\"");

            #line 288 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));

            #line default
            #line hidden
            this.Write("\", ");

            #line 288 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 WriteParameter(parameter.ParameterType, parameter.Name);

            #line default
            #line hidden
            this.Write("));\r\n");

            #line 289 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden

            #line 290 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("            __content = new FormUrlEncodedContent(list);\r\n");

            #line 292 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("            return PostAsync");

            #line 293 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ReturnType == typeof(Task) ? "" : "<" + UnwrapTask(operation.ReturnType) + ">"));

            #line default
            #line hidden
            this.Write("(\"/");

            #line 293 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.RootName));

            #line default
            #line hidden
            this.Write("/");

            #line 293 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationName));

            #line default
            #line hidden
            this.Write("\", __content, cancellationToken);\r\n        }\r\n");

            #line 295 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(operation.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#endif\r\n");

            #line 297 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("\r\n");

            #line 299 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("\r\n");

            #line 301 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(contract.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#endif\r\n");

            #line 303 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("        #endregion\r\n\r\n");

            #line 306 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("    }\r\n\r\n");

            #line 309 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var contract in contracts) {

            #line default
            #line hidden

            #line 310 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if (contract.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#if DEBUG\r\n");

            #line 312 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("    public interface ");

            #line 313 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(contract.InterfaceName));

            #line default
            #line hidden
            this.Write("\r\n    {\r\n");

            #line 315 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 foreach(var operation in contract.Operations) {

            #line default
            #line hidden

            #line 316 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(operation.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#if DEBUG\r\n");

            #line 318 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("        ");

            #line 319 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BeautifyType(operation.ReturnType)));

            #line default
            #line hidden
            this.Write(" ");

            #line 319 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationName + ((addAsyncSuffix) ? "Async" : "")));

            #line default
            #line hidden
            this.Write("(");

            #line 319 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ParameterStringWithOptional));

            #line default
            #line hidden
            this.Write(");\r\n");

            #line 320 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if(operation.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#endif\r\n");

            #line 322 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden

            #line 323 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("    }\r\n");

            #line 325 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 if (contract.IsDebugOnly) {

            #line default
            #line hidden
            this.Write("#endif\r\n");

            #line 327 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden

            #line 328 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"
 }

            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }

        #line 331 "D:\GitHub\guitarrapc\LightNode\src\LightNode2.Client.Generator\LightNodeClientGenerator.tt"

    void WriteParameter(Type parameterType, string parameterName)
    {
        if(parameterType == typeof(string))
        {
            Write(parameterName);
        }
        else if(parameterType.IsEnum)
        {
            var underlyingType = Enum.GetUnderlyingType(parameterType);
            Write(string.Format("(({0}){1}).ToString()", underlyingType, parameterName));
        }
        else if(parameterType.IsGenericType && parameterType.GetGenericTypeDefinition() == typeof(Nullable<>))
        {
            WriteParameter(parameterType.GetGenericArguments()[0], parameterName);
        }
        else
        {
            Write(parameterName + ".ToString()");
        }
    }


        #line default
        #line hidden
    }

    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class LightNodeClientGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0)
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
